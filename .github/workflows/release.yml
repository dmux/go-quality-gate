name: Release

on:
    push:
        tags:
            - "v*"

permissions:
    contents: write
    packages: write

env:
    GO_VERSION: "1.24"

jobs:
    release:
        name: Build and Release
        runs-on: ubuntu-latest

        steps:
            - uses: actions/checkout@v4

            - name: Set up Go
              uses: actions/setup-go@v5
              with:
                  go-version: ${{ env.GO_VERSION }}

            - name: Get version and build info
              id: build_info
              run: |
                  echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
                  echo "BUILD_DATE=$(date -u +%Y-%m-%dT%H:%M:%SZ)" >> $GITHUB_OUTPUT
                  echo "GIT_COMMIT=${GITHUB_SHA::8}" >> $GITHUB_OUTPUT

            - name: Cache Go modules
              uses: actions/cache@v4
              with:
                  path: |
                      ~/.cache/go-build
                      ~/go/pkg/mod
                  key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
                  restore-keys: |
                      ${{ runner.os }}-go-

            - name: Download dependencies
              run: go mod download

            - name: Build binaries for all platforms
              env:
                  VERSION: ${{ steps.build_info.outputs.VERSION }}
                  BUILD_DATE: ${{ steps.build_info.outputs.BUILD_DATE }}
                  GIT_COMMIT: ${{ steps.build_info.outputs.GIT_COMMIT }}
              run: |
                  # Build configurations
                  declare -a configs=(
                      "linux:amd64"
                      "linux:arm64"
                      "darwin:amd64"
                      "darwin:arm64"
                      "windows:amd64"
                  )

                  # Create builds directory
                  mkdir -p builds

                  # Build for each configuration
                  for config in "${configs[@]}"; do
                      IFS=':' read -r goos goarch <<< "$config"
                      
                      EXTENSION=""
                      if [[ "$goos" == "windows" ]]; then
                          EXTENSION=".exe"
                      fi
                      
                      BINARY_NAME="quality-gate-${goos}-${goarch}${EXTENSION}"
                      
                      echo "Building ${BINARY_NAME} for ${goos}/${goarch}..."
                      
                      GOOS=$goos GOARCH=$goarch CGO_ENABLED=0 go build \
                          -ldflags "-X main.Version=${VERSION} -X main.BuildDate=${BUILD_DATE} -X main.GitCommit=${GIT_COMMIT} -s -w" \
                          -o "builds/${BINARY_NAME}" ./cmd/quality-gate
                      
                      # Generate checksum
                      cd builds
                      sha256sum "${BINARY_NAME}" > "${BINARY_NAME}.sha256"
                      cd ..
                      
                      echo "âœ… Built ${BINARY_NAME}"
                  done

                  ls -la builds/

            - name: Create Release with GitHub CLI
              env:
                  GH_TOKEN: ${{ github.token }}
                  VERSION: ${{ steps.build_info.outputs.VERSION }}
              run: |
                  # Create release notes
                  cat > release-notes.md << EOF
                  ## Changes

                  See [CHANGELOG.md](https://github.com/${{ github.repository }}/blob/main/CHANGELOG.md) for details.

                  ## Installation

                  ### Download Binary

                  Download the appropriate binary for your platform from the assets below:

                  **Linux:**
                  - [quality-gate-linux-amd64](https://github.com/${{ github.repository }}/releases/download/${VERSION}/quality-gate-linux-amd64) (Intel/AMD 64-bit)
                  - [quality-gate-linux-arm64](https://github.com/${{ github.repository }}/releases/download/${VERSION}/quality-gate-linux-arm64) (ARM 64-bit)

                  **macOS:**
                  - [quality-gate-darwin-amd64](https://github.com/${{ github.repository }}/releases/download/${VERSION}/quality-gate-darwin-amd64) (Intel Mac)
                  - [quality-gate-darwin-arm64](https://github.com/${{ github.repository }}/releases/download/${VERSION}/quality-gate-darwin-arm64) (Apple Silicon)

                  **Windows:**
                  - [quality-gate-windows-amd64.exe](https://github.com/${{ github.repository }}/releases/download/${VERSION}/quality-gate-windows-amd64.exe) (64-bit)

                  ### Using Go Install

                  \`\`\`bash
                  go install github.com/dmux/go-quality-gate/cmd/quality-gate@${VERSION}
                  \`\`\`

                  ### Using Docker

                  \`\`\`bash
                  docker run --rm ghcr.io/dmux/go-quality-gate:${VERSION#v} --version
                  \`\`\`

                  ## Usage

                  \`\`\`bash
                  # Initialize quality gate in your project
                  quality-gate --init

                  # Install git hooks
                  quality-gate --install

                  # Check version
                  quality-gate -v
                  \`\`\`

                  ## Verification

                  All binaries include SHA256 checksums for integrity verification:

                  \`\`\`bash
                  # Linux/macOS
                  sha256sum -c quality-gate-linux-amd64.sha256

                  # macOS (alternative)
                  shasum -a 256 -c quality-gate-darwin-amd64.sha256
                  \`\`\`
                  EOF

                  # Create release
                  gh release create "${VERSION}" \
                      --title "Release ${VERSION}" \
                      --notes-file release-notes.md \
                      builds/*

    build-docker:
        name: Build and Push Docker Image
        runs-on: ubuntu-latest
        needs: release

        steps:
            - uses: actions/checkout@v4

            - name: Get version from tag
              id: get_version
              run: |
                  VERSION=${GITHUB_REF#refs/tags/}
                  echo "VERSION=${VERSION}" >> $GITHUB_OUTPUT
                  echo "VERSION_SHORT=${VERSION#v}" >> $GITHUB_OUTPUT

            - name: Get build info
              id: build_info
              run: |
                  echo "BUILD_DATE=$(date -u +%Y-%m-%dT%H:%M:%SZ)" >> $GITHUB_OUTPUT

            - name: Set up Docker Buildx
              uses: docker/setup-buildx-action@v3

            - name: Login to GitHub Container Registry
              uses: docker/login-action@v3
              with:
                  registry: ghcr.io
                  username: ${{ github.actor }}
                  password: ${{ secrets.GITHUB_TOKEN }}

            - name: Build and push Docker image
              uses: docker/build-push-action@v5
              with:
                  context: .
                  platforms: linux/amd64,linux/arm64
                  push: true
                  tags: |
                      ghcr.io/${{ github.repository }}:latest
                      ghcr.io/${{ github.repository }}:${{ steps.get_version.outputs.VERSION_SHORT }}
                  build-args: |
                      VERSION=${{ steps.get_version.outputs.VERSION }}
                      BUILD_DATE=${{ steps.build_info.outputs.BUILD_DATE }}
                      GIT_COMMIT=${{ github.sha }}
                  cache-from: type=gha
                  cache-to: type=gha,mode=max
