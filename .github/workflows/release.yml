name: Release

on:
    push:
        tags:
            - "v*"

env:
    GO_VERSION: "1.24"

jobs:
    create-release:
        name: Create Release
        runs-on: ubuntu-latest
        outputs:
            upload_url: ${{ steps.create_release.outputs.upload_url }}
            release_id: ${{ steps.create_release.outputs.id }}

        steps:
            - uses: actions/checkout@v4

            - name: Get version from tag
              id: get_version
              run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

            - name: Create Release
              id: create_release
              uses: actions/create-release@v1
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
              with:
                  tag_name: ${{ steps.get_version.outputs.VERSION }}
                  release_name: Release ${{ steps.get_version.outputs.VERSION }}
                  body: |
                      ## Changes

                      See [CHANGELOG.md](https://github.com/${{ github.repository }}/blob/main/CHANGELOG.md) for details.

                      ## Installation

                      ### Download Binary

                      Download the appropriate binary for your platform from the assets below.

                      ### Using Go Install

                      ```bash
                      go install github.com/dmux/go-quality-gate/cmd/quality-gate@${{ steps.get_version.outputs.VERSION }}
                      ```

                      ### Using Homebrew (macOS/Linux)

                      ```bash
                      # If you have a homebrew tap configured
                      brew install quality-gate
                      ```

                      ## Usage

                      ```bash
                      # Initialize quality gate in your project
                      quality-gate --init

                      # Install git hooks
                      quality-gate --install

                      # Check version
                      quality-gate -v
                      ```
                  draft: false
                  prerelease: false

    build-and-upload:
        name: Build and Upload
        runs-on: ubuntu-latest
        needs: create-release
        strategy:
            matrix:
                include:
                    - goos: linux
                      goarch: amd64
                      suffix: linux-amd64
                    - goos: linux
                      goarch: arm64
                      suffix: linux-arm64
                    - goos: darwin
                      goarch: amd64
                      suffix: darwin-amd64
                    - goos: darwin
                      goarch: arm64
                      suffix: darwin-arm64
                    - goos: windows
                      goarch: amd64
                      suffix: windows-amd64
                      extension: .exe

        steps:
            - uses: actions/checkout@v4

            - name: Set up Go
              uses: actions/setup-go@v5
              with:
                  go-version: ${{ env.GO_VERSION }}

            - name: Cache Go modules
              uses: actions/cache@v4
              with:
                  path: |
                      ~/.cache/go-build
                      ~/go/pkg/mod
                  key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
                  restore-keys: |
                      ${{ runner.os }}-go-

            - name: Download dependencies
              run: go mod download

            - name: Get version and build info
              id: build_info
              run: |
                  echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
                  echo "BUILD_DATE=$(date -u +%Y-%m-%dT%H:%M:%SZ)" >> $GITHUB_OUTPUT
                  echo "GIT_COMMIT=${GITHUB_SHA::8}" >> $GITHUB_OUTPUT

            - name: Set binary name
              id: binary_name
              run: echo "name=quality-gate-${{ matrix.suffix }}${{ matrix.extension }}" >> $GITHUB_OUTPUT

            - name: Build binary
              env:
                  GOOS: ${{ matrix.goos }}
                  GOARCH: ${{ matrix.goarch }}
                  CGO_ENABLED: 0
              run: |
                  BINARY_NAME="${{ steps.binary_name.outputs.name }}"
                  LDFLAGS="-ldflags \"-X main.Version=${{ steps.build_info.outputs.VERSION }} -X main.BuildDate=${{ steps.build_info.outputs.BUILD_DATE }} -X main.GitCommit=${{ steps.build_info.outputs.GIT_COMMIT }} -s -w\""

                  echo "Building ${BINARY_NAME} for ${GOOS}/${GOARCH}..."
                  go build ${LDFLAGS} -o ${BINARY_NAME} ./cmd/quality-gate

                  # Create checksum
                  if command -v sha256sum > /dev/null; then
                    sha256sum ${BINARY_NAME} > ${BINARY_NAME}.sha256
                  else
                    shasum -a 256 ${BINARY_NAME} > ${BINARY_NAME}.sha256
                  fi

                  # Make executable (for Unix systems)
                  if [[ "${{ matrix.goos }}" != "windows" ]]; then
                    chmod +x ${BINARY_NAME}
                  fi

            - name: Upload Release Asset
              uses: actions/upload-release-asset@v1
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
              with:
                  upload_url: ${{ needs.create-release.outputs.upload_url }}
                  asset_path: ./${{ steps.binary_name.outputs.name }}
                  asset_name: ${{ steps.binary_name.outputs.name }}
                  asset_content_type: application/octet-stream

            - name: Upload Checksum
              uses: actions/upload-release-asset@v1
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
              with:
                  upload_url: ${{ needs.create-release.outputs.upload_url }}
                  asset_path: ./${{ steps.binary_name.outputs.name }}.sha256
                  asset_name: ${{ steps.binary_name.outputs.name }}.sha256
                  asset_content_type: text/plain

    build-docker:
        name: Build and Push Docker Image
        runs-on: ubuntu-latest
        needs: create-release

        steps:
            - uses: actions/checkout@v4

            - name: Get version from tag
              id: get_version
              run: |
                  VERSION=${GITHUB_REF#refs/tags/}
                  echo "VERSION=${VERSION}" >> $GITHUB_OUTPUT
                  echo "VERSION_SHORT=${VERSION#v}" >> $GITHUB_OUTPUT

            - name: Get build info
              id: build_info
              run: |
                  echo "BUILD_DATE=$(date -u +%Y-%m-%dT%H:%M:%SZ)" >> $GITHUB_OUTPUT

            - name: Set up Docker Buildx
              uses: docker/setup-buildx-action@v3

            - name: Login to GitHub Container Registry
              uses: docker/login-action@v3
              with:
                  registry: ghcr.io
                  username: ${{ github.actor }}
                  password: ${{ secrets.GITHUB_TOKEN }}

            - name: Build and push Docker image
              uses: docker/build-push-action@v5
              with:
                  context: .
                  platforms: linux/amd64,linux/arm64
                  push: true
                  tags: |
                      ghcr.io/${{ github.repository }}:latest
                      ghcr.io/${{ github.repository }}:${{ steps.get_version.outputs.VERSION_SHORT }}
                  build-args: |
                      VERSION=${{ steps.get_version.outputs.VERSION }}
                      BUILD_DATE=${{ steps.build_info.outputs.BUILD_DATE }}
                      GIT_COMMIT=${{ github.sha }}
                  cache-from: type=gha
                  cache-to: type=gha,mode=max
